---
/**
 * Example page demonstrating SettingsDialog usage
 * This is a reference implementation showing different configuration scenarios
 */
import WosBaseLayout from '../layouts/WosBaseLayout.astro';
import SettingsDialog from '../components/SettingsDialog.astro';
---

<WosBaseLayout
  title='Settings Dialog Examples'
  description='Examples of using the SettingsDialog component'
  keywords='settings, dialog, component, examples'
>
  <div class='examples-container'>
    <h1>SettingsDialog Component Examples</h1>

    <section class='example-section'>
      <h2>Example 1: Simple Text Settings</h2>
      <button id='open-simple' class='example-btn'>Open Simple Dialog</button>
    </section>

    <section class='example-section'>
      <h2>Example 2: Multiple Input Types</h2>
      <button id='open-advanced' class='example-btn'
        >Open Advanced Dialog</button
      >
    </section>

    <section class='example-section'>
      <h2>Example 3: Validation Example</h2>
      <button id='open-validated' class='example-btn'
        >Open Validated Dialog</button
      >
    </section>

    <div id='output' class='output-section'>
      <h3>Last Action:</h3>
      <pre id='output-content'>No actions yet...</pre>
    </div>
  </div>

  <!-- Example 1: Simple Dialog -->
  <SettingsDialog id='simple-dialog' title='Simple Settings'>
    <form class='settings-form'>
      <div class='form-group'>
        <label for='setting1'>Setting Name</label>
        <input
          type='text'
          id='setting1'
          name='settingName'
          placeholder='Enter a name'
        />
      </div>
      <div class='form-group'>
        <label for='setting2'>Description</label>
        <textarea
          id='setting2'
          name='description'
          rows='3'
          placeholder='Enter a description'></textarea>
      </div>
    </form>
  </SettingsDialog>

  <!-- Example 2: Advanced Dialog -->
  <SettingsDialog id='advanced-dialog' title='Advanced Settings'>
    <form class='settings-form'>
      <div class='form-group'>
        <label for='adv-text'>Text Input</label>
        <input type='text' id='adv-text' name='textValue' />
      </div>
      <div class='form-group'>
        <label for='adv-number'>Number Input</label>
        <input type='number' id='adv-number' name='numberValue' min='0' />
      </div>
      <div class='form-group'>
        <label for='adv-select'>Select Option</label>
        <select id='adv-select' name='selectValue'>
          <option value='option1'>Option 1</option>
          <option value='option2'>Option 2</option>
          <option value='option3'>Option 3</option>
        </select>
      </div>
      <div class='form-group'>
        <label>
          <input type='checkbox' name='checkboxValue' />
          Enable feature
        </label>
      </div>
    </form>
  </SettingsDialog>

  <!-- Example 3: Validated Dialog -->
  <SettingsDialog id='validated-dialog' title='Validated Form'>
    <form id='validated-form' class='settings-form'>
      <div class='form-group'>
        <label for='email'>Email (required)</label>
        <input
          type='email'
          id='email'
          name='email'
          required
          placeholder='user@example.com'
        />
      </div>
      <div class='form-group'>
        <label for='url'>URL (required)</label>
        <input
          type='url'
          id='url'
          name='url'
          required
          placeholder='https://example.com'
        />
      </div>
    </form>
  </SettingsDialog>
</WosBaseLayout>

<script>
  const output = document.getElementById('output-content');

  const logAction = (message: string, data?: any) => {
    if (output) {
      const timestamp = new Date().toLocaleTimeString();
      output.textContent = `[${timestamp}] ${message}\n${
        data ? JSON.stringify(data, null, 2) : ''
      }`;
    }
  };

  // Example 1: Simple Dialog
  const openSimpleBtn = document.getElementById('open-simple');
  const simpleDialog = document.getElementById(
    'simple-dialog'
  ) as HTMLDialogElement;

  openSimpleBtn?.addEventListener('click', () => {
    if (simpleDialog && (simpleDialog as any).__api) {
      const api = (simpleDialog as any).__api;
      api.open();
    }
  });

  simpleDialog?.addEventListener('dialog-ready', (e) => {
    const api = (e as CustomEvent).detail;
    api.onSave((data: Record<string, any>) => {
      logAction('Simple dialog saved:', data);
    });
    api.onCancel(() => {
      logAction('Simple dialog cancelled');
    });
  });

  // Example 2: Advanced Dialog
  const openAdvancedBtn = document.getElementById('open-advanced');
  const advancedDialog = document.getElementById(
    'advanced-dialog'
  ) as HTMLDialogElement;

  openAdvancedBtn?.addEventListener('click', () => {
    if (advancedDialog && (advancedDialog as any).__api) {
      const api = (advancedDialog as any).__api;
      api.open();
    }
  });

  advancedDialog?.addEventListener('dialog-ready', (e) => {
    const api = (e as CustomEvent).detail;
    api.onSave((data: Record<string, any>) => {
      logAction('Advanced dialog saved:', data);
    });
    api.onCancel(() => {
      logAction('Advanced dialog cancelled');
    });
  });

  // Example 3: Validated Dialog
  const openValidatedBtn = document.getElementById('open-validated');
  const validatedDialog = document.getElementById(
    'validated-dialog'
  ) as HTMLDialogElement;
  const validatedForm = document.getElementById(
    'validated-form'
  ) as HTMLFormElement;

  openValidatedBtn?.addEventListener('click', () => {
    if (validatedDialog && (validatedDialog as any).__api) {
      const api = (validatedDialog as any).__api;
      api.open();
    }
  });

  validatedDialog?.addEventListener('dialog-ready', (e) => {
    const api = (e as CustomEvent).detail;
    api.onSave((data: Record<string, any>) => {
      // Validate form before saving
      if (validatedForm && !validatedForm.checkValidity()) {
        validatedForm.reportValidity();
        logAction('Validation failed - form has errors');
        // Re-open dialog
        setTimeout(() => api.open(), 100);
      } else {
        logAction('Validated dialog saved:', data);
      }
    });
    api.onCancel(() => {
      logAction('Validated dialog cancelled');
    });
  });
</script>

<style>
  .examples-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  h1 {
    color: var(--text-lightest, #f5efff);
    margin-bottom: 2rem;
  }

  .example-section {
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: var(--bg-tertiary, #4b1a81);
    border: 1px solid var(--border-primary, rgba(199, 156, 255, 0.4));
    border-radius: var(--border-radius, 8px);
  }

  .example-section h2 {
    color: var(--text-primary, #dacfe6);
    margin-top: 0;
    margin-bottom: 1rem;
  }

  .example-btn {
    padding: 0.75rem 1.5rem;
    background: var(--bg-secondary, #7736c6);
    color: var(--text-lightest, #f5efff);
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .example-btn:hover {
    background: var(--accent-violet, #c79cff);
    color: var(--accent-purple, #410071);
  }

  .output-section {
    margin-top: 2rem;
    padding: 1.5rem;
    background: var(--bg-dark, #161625);
    border: 1px solid var(--border-primary, rgba(199, 156, 255, 0.4));
    border-radius: var(--border-radius, 8px);
  }

  .output-section h3 {
    color: var(--text-primary, #dacfe6);
    margin-top: 0;
  }

  .output-section pre {
    color: var(--text-secondary, #ddcdf1);
    margin: 0;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  /* Form styles */
  .settings-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    color: var(--text-lightest, #f5efff);
    font-weight: 600;
    font-size: 0.95rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    padding: 0.75rem;
    border: 1px solid var(--border-primary, rgba(199, 156, 255, 0.4));
    border-radius: 6px;
    background: var(--bg-tertiary, #4b1a81);
    color: var(--text-primary, #dacfe6);
    font-size: 1rem;
    font-family: var(--font-main, 'Inter', sans-serif);
    transition: all 0.2s ease;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--accent-violet, #c79cff);
    background: var(--bg-dark, #161625);
  }

  .form-group input[type='checkbox'] {
    width: auto;
    margin-right: 0.5rem;
  }
</style>
