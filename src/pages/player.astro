---
import '../styles/wos-plus-streamer.css';
import WosBaseLayout from '../layouts/WosBaseLayout.astro';
import Twitch from '../components/Icons/Twitch.astro';
import SettingsDialog from '../components/SettingsDialog.astro';
---

<WosBaseLayout
  title="Clarkio's Words on Stream Tool"
  description="Clarkio's Words on Stream Tool"
  keywords='clarkio, words on stream, wos, twitch, streaming, helper, wordsonstream, tool'
>
  <SettingsDialog id='player-settings' title='Player Settings'>
    <form id='player-settings-form' class='settings-form'>
      <div class='form-group'>
        <label for='mirror-url-input'>Mirror URL</label>
        <input
          type='url'
          id='mirror-url-input'
          name='mirrorUrl'
          placeholder='https://example.com/game-mirror'
          required
        />
        <small class='form-help'
          >The URL to the Words on Stream game mirror</small
        >
      </div>
      <div class='form-group'>
        <label for='twitch-channel-input'>Twitch Channel</label>
        <input
          type='text'
          id='twitch-channel-input'
          name='twitchChannel'
          placeholder='clarkio'
          required
        />
        <small class='form-help'>The Twitch channel name to connect to</small>
      </div>
    </form>
  </SettingsDialog>

  <div class='streamer-wos-main-grid'>
    <div class='streamer-wos-board-container' id='wos-board'>
      <iframe id='streamer-wos-board-iframe' src='' loading='lazy'></iframe>
    </div>
    <div class='streamer-channel-data-container'>
      <div id='overlay' class='overlay'>
        <div id='level-current' class='level-current'>
          <span id='level-title' class='level-title'>LEVEL</span>
          <span id='level-value' class='level-value'></span>
        </div>
        <div id='level-record-container' class='level-record-container'>
          <div class='level-record'>
            <span class='icon'>
              <svg
                xmlns='http://www.w3.org/2000/svg'
                width='75%'
                height='75%'
                viewBox='0 0 24 24'
                preserveAspectRatio='xMidYMid meet'
                fill='currentcolor'
              >
                <path
                  d='M12 6a7 7 0 1 0 0 14 7 7 0 0 0 0-14zm1 8h-2V8h2v6z'
                  opacity='.3'></path>
                <path d='M9 1h6v2H9z'></path>
                <path
                  d='m19 7 1-1-1-1-1 1a9 9 0 0 0-15 7 9 9 0 1 0 16-6zm-7 13a7 7 0 1 1 0-14 7 7 0 0 1 0 14z'
                ></path>
                <path d='M11 8h2v6h-2z'></path>
              </svg>
            </span>
            <span id='pb-value' class='level-record-value'></span>
          </div>
          <div class='level-record'>
            <span class='icon'>
              <svg
                xmlns='http://www.w3.org/2000/svg'
                width='75%'
                height='75%'
                viewBox='0 0 24 24'
                preserveAspectRatio='xMidYMid meet'
                fill='currentcolor'
              >
                <path fill='none' d='M0 0h24v24H0z'></path>
                <path d='M12 14c-2 0-3-1-3-3V5h6v6c0 2-1 3-3 3z' opacity='.3'
                ></path>
                <path
                  d='M19 5h-2V3H7v2H5L3 7v1c0 3 2 5 4 5 1 1 2 3 4 3v3H7v2h10v-2h-4v-3c2 0 3-2 4-3 2 0 4-2 4-5V7l-2-2zM5 8V7h2v4L5 8zm7 6c-2 0-3-1-3-3V5h6v6c0 2-1 3-3 3zm7-6-2 3V7h2v1z'
                ></path>
              </svg>
            </span>
            <span id='daily-pb-value' class='level-record-value'></span>
          </div>
        </div>
      </div>
    </div>
    <div class='streamer-twitch-chat-frame'>
      <iframe id='streamer-twitch-chat-widget' src=''></iframe>
    </div>
    <div class='streamer-bottom-container'>
      <div id='streamer-correct-words-log-container'>
        <span>Correct Words: (* potential words missed)</span>
        <div id='correct-words-log' class='correct-words-log'>
          <!-- <div class='word-group'>
            <div class='word-group__title'>4:</div><div
              class='word-group__words'
            >
              <span class='correct-word'>DOGS</span>
              <span class='correct-word'>DOGS</span>
              <span class='correct-word'>DOGS</span>
              <span class='correct-word'>DOGS</span>
              <span class='correct-word'>DOGS</span>
              <span class='correct-word'>DOGS</span>
              <span class='correct-word'>DOGS</span>
              <span class='correct-word'>DOGS</span>
              <span class='correct-word'>DOGS</span>
              <span class='correct-word'>DOGS</span>
            </div>
          </div>
          <div class='word-group'>
            <div class='word-group__title'>5:</div><div
              class='word-group__words'
            >
              <span class='correct-word'>DOGES</span>
              <span class='correct-word'>DOGES</span>
              <span class='correct-word'>DOGES</span>
              <span class='correct-word'>DOGES</span>
              <span class='correct-word'>DOGES</span>
              <span class='correct-word'>DOGES</span>
              <span class='correct-word'>DOGES</span>
              <span class='correct-word'>DOGES</span>
            </div>
          </div>
          <div class='word-group'>
            <div class='word-group__title'>6:</div><div
              class='word-group__words'
            >
              <span class='correct-word'>DOGIES</span>
              <span class='correct-word'>GOODIE</span>
              <span class='correct-word'>GOOSED</span>
            </div>
          </div>
          <div class='word-group'>
            <div class='word-group__title'>7:</div><div
              class='word-group__words'
            >
              <span class='correct-word'>GOODIES</span>
              <span class='correct-word'>GOODIES</span>
              <span class='correct-word'>GOODIES</span>
            </div>
          </div>
          <div class='word-group'>
            <div class='word-group__title'>8:</div><div
              class='word-group__words'
            >
              <span class='correct-word'>AGOODIES</span>
              <span class='correct-word'>AGOODIES</span>
              <span class='correct-word'>AGOODIES</span>
            </div>
          </div>
          <div class='word-group'>
            <div class='word-group__title'>9:</div><div
              class='word-group__words'
            >
              <span class='correct-word'>AAGOODIES</span>
              <span class='correct-word'>AAGOODIES</span>
              <span class='correct-word'>AAGOODIES</span>
            </div>
          </div> -->
        </div>
      </div>
      <div class='streamer-level-data-grid-container'>
        <div class='level-data-container'>
          <div>
            <span id='letters-label' class='letters-label'>Letters:</span>
            <span id='letters' class='letters'></span>
          </div>
          <div>
            <span id='hidden-letter-label' class='hidden-letter-label'
              >Hidden Letters:</span
            >
            <span id='hidden-letter' class='hidden-letter'></span>
          </div>
          <div>
            <span id='fake-letter-label' class='fake-letter-label'
              >Fake Letters:</span
            >
            <span id='fake-letter' class='fake-letter'></span>
          </div>
          <span class='made-by'>Made by: <Twitch /> clarkio</span>
          <div class='daily-clear-container'>
            <span id='daily-clear-title'>Today's Clears:</span>
            <span id='daily-clear-value'></span>
          </div>
        </div>
      </div>
    </div>
  </div>
</WosBaseLayout>

<script>
  import { GameSpectator } from '../scripts/wos-plus-main';

  const boardContainer = document.getElementById(
    'wos-board'
  ) as HTMLDivElement | null;
  const boardIframe = document.getElementById(
    'streamer-wos-board-iframe'
  ) as HTMLIFrameElement | null;
  let currentMirrorUrl = '';
  let twitchChannel = 'clarkio';

  const isBoardVisible = () =>
    boardContainer
      ? window.getComputedStyle(boardContainer).display !== 'none'
      : true;

  const loadBoardIframeIfVisible = () => {
    if (!boardIframe || !currentMirrorUrl || !isBoardVisible()) {
      return;
    }

    if (boardIframe.getAttribute('src') !== currentMirrorUrl) {
      boardIframe.setAttribute('src', currentMirrorUrl);
    }
  };

  const clearBoardIframe = () => {
    if (!boardIframe) {
      return;
    }

    if (boardIframe.hasAttribute('src')) {
      boardIframe.removeAttribute('src');
    }
  };

  const spectator = new GameSpectator();

  // Initialize dialog API reference
  let settingsDialog: any = null;

  const initializeSettingsDialog = (event?: Event) => {
    const dialog = document.getElementById(
      'player-settings'
    ) as HTMLDialogElement;

    if (dialog && (dialog as any).__api) {
      settingsDialog = (dialog as any).__api;
    }
  };

  // Separate function to set up save callback
  const setupDialogCallbacks = () => {
    if (!settingsDialog) return;

    // Set up save callback
    settingsDialog.onSave((data: Record<string, any>) => {
      const params = new URLSearchParams(window.location.search);

      if (data.mirrorUrl) {
        params.set('mirrorUrl', data.mirrorUrl);
      }
      if (data.twitchChannel) {
        params.set('twitchChannel', data.twitchChannel);
      }

      // Reload the page with new parameters
      window.location.href = window.location.pathname + '?' + params.toString();
    });
  };

  const checkRequiredParams = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const hasMirrorUrl = urlParams.has('mirrorUrl');
    const hasTwitchChannel = urlParams.has('twitchChannel');

    // If either parameter is missing, show the settings dialog
    if (!hasMirrorUrl || !hasTwitchChannel) {
      // Pre-populate any existing values
      if (hasMirrorUrl) {
        const mirrorUrlInput = document.getElementById(
          'mirror-url-input'
        ) as HTMLInputElement;
        if (mirrorUrlInput) {
          mirrorUrlInput.value = urlParams.get('mirrorUrl') || '';
        }
      }

      if (hasTwitchChannel) {
        const twitchChannelInput = document.getElementById(
          'twitch-channel-input'
        ) as HTMLInputElement;
        if (twitchChannelInput) {
          twitchChannelInput.value = urlParams.get('twitchChannel') || '';
        }
      }

      // Ensure dialog is ready and set up callbacks before opening
      const attemptOpenDialog = () => {
        const dialog = document.getElementById('player-settings') as HTMLDialogElement;
        if (dialog && (dialog as any).__api) {
          settingsDialog = (dialog as any).__api;
          setupDialogCallbacks();
          settingsDialog.open();
        } else {
          // If dialog not ready, try again shortly
          setTimeout(attemptOpenDialog, 50);
        }
      };
      
      setTimeout(attemptOpenDialog, 100);

      return false;
    }

    return true;
  };

  // Function to initialize the page
  const initializePage = () => {
    // Reset dialog reference on each navigation
    settingsDialog = null;
    
    // Initialize settings dialog
    const dialog = document.getElementById('player-settings') as HTMLDialogElement;
    if (dialog) {
      // Try to get the API immediately if it exists
      if ((dialog as any).__api) {
        settingsDialog = (dialog as any).__api;
      } else {
        // If not ready yet, wait for the event
        dialog.addEventListener('dialog-ready', initializeSettingsDialog, { once: true });
      }
    }

    // check for query parameters in the url
    const urlParams = new URLSearchParams(window.location.search);

    // Check if required parameters are present (this will trigger dialog if needed)
    const hasRequiredParams = checkRequiredParams();

    if (urlParams.has('mirrorUrl')) {
      const url = urlParams.get('mirrorUrl') || '';
      currentMirrorUrl = url.trim();
      loadBoardIframeIfVisible();
      console.log(url);
    }

    if (urlParams.has('chat')) {
      const isChatEnabled = urlParams.get('chat')?.toLowerCase() === 'true';
      const twitchChatWidget = document.getElementById(
        'streamer-twitch-chat-widget'
      ) as HTMLIFrameElement;
      const grid = document.querySelector(
        '.streamer-wos-main-grid'
      ) as HTMLElement;
      if (isChatEnabled) {
        twitchChatWidget.style.display = '';
        grid.classList.remove('chat-hidden');
      } else {
        twitchChatWidget.style.display = 'none';
        grid.classList.add('chat-hidden');
      }
    }

    if (urlParams.has('twitchChannel')) {
      twitchChannel = urlParams.get('twitchChannel') || 'clarkio';
      const twitchChatWidget = document.getElementById(
        'streamer-twitch-chat-widget'
      ) as HTMLIFrameElement;
      twitchChatWidget.src = `https://www.twitch.tv/embed/${twitchChannel}/chat?darkpopout&parent=${location.hostname}`;
    }

    // Only connect if we have required parameters
    if (hasRequiredParams) {
      spectator.connectToWosGame(currentMirrorUrl);
      spectator.connectToTwitch(twitchChannel);
    }

    if (urlParams.has('board')) {
      const boardEnabled = urlParams.get('board')?.toLowerCase() === 'true';
      if (boardContainer) {
        if (boardEnabled) {
          boardContainer.style.display = '';
          loadBoardIframeIfVisible();
        } else {
          boardContainer.style.display = 'none';
          clearBoardIframe();
        }
      }
    } else {
      loadBoardIframeIfVisible();
    }
  };

  // Listen for both events to handle initial load and navigation
  document.addEventListener('DOMContentLoaded', initializePage);
  document.addEventListener('astro:page-load', initializePage);
</script>

<style>
  /* Override wrapper max-width when in widget mode */
  :global(.widget-mode .wrapper) {
    max-width: 100% !important;
    padding: 0 !important;
  }

  /* Settings form styles */
  .settings-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    color: var(--text-lightest, #f5efff);
    font-weight: 600;
    font-size: 0.95rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    padding: 0.75rem;
    border: 1px solid var(--border-primary, rgba(199, 156, 255, 0.4));
    border-radius: 6px;
    background: var(--bg-tertiary, #4b1a81);
    color: var(--text-primary, #dacfe6);
    font-size: 1rem;
    font-family: var(--font-main, 'Inter', sans-serif);
    transition: all 0.2s ease;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--accent-violet, #c79cff);
    background: var(--bg-dark, #161625);
  }

  .form-group input::placeholder {
    color: rgba(218, 207, 230, 0.5);
  }

  .form-help {
    color: rgba(218, 207, 230, 0.7);
    font-size: 0.85rem;
    font-style: italic;
  }
</style>
