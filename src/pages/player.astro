---
import Logo from '../components/Icons/Logo.astro';
import WosBaseLayout from '../layouts/WosBaseLayout.astro';
import Twitch from '../components/Icons/Twitch.astro';
import '../styles/wos-helper-player.css';
---

<WosBaseLayout
  title="Clarkio's Words on Stream Tool"
  description="Clarkio's Words on Stream Tool"
  keywords='clarkio, words on stream, wos, twitch, streaming, helper, wordsonstream, tool'
>
  <div id='logo-container-id' class='logo-container'>
    <a href='/'>
      <div class='logo dark'>
        <Logo name='Logo' />
      </div>
    </a>

    <h2>Clarkio's Words on Stream Tool</h2>
  </div>
  <details id='wos-helper-controls'>
    <summary>Show/Hide Controls</summary>
    <div class='controls'>
      <p>
        If you're not providing the WOS Mirror Link and Twitch Channel use the
        following form to set up the game. In the Mirror Link input enter the
        full mirror link URL (example:
        https://wos.gg/r/aaa-bbbb-cccc123-dd321-eeeee123). In the Twitch Channel
        input enter just the channel username you want to connect to for the
        chat messages. After entering these values make sure to click the
        Connect buttons for each.
      </p>
      <div>
        <label>WOS Mirror Link:</label>
        <input type='text' id='mirrorUrl' placeholder='Enter WOS mirror link' />
        <button id='wos-connect-btn'>Connect WOS</button>
        <button id='wos-discconnect-btn'>Disconnect WOS</button>
      </div>
      <div>
        <label>Twitch Channel:</label>
        <input
          type='text'
          id='twitchChannel'
          placeholder='Enter channel name'
        />
        <button id='twitch-connect-btn'>Connect Twitch</button>
        <button id='twitch-disconnect-btn'>Disconnect Twitch</button>
      </div>
    </div>
  </details>

  <div class='wos-main-grid'>
    <div class='twitch-chat-frame'>
      <iframe id='twitch-chat-widget' src=''></iframe>
    </div>
    <div class='player-level-data-grid-container'>
      <div class='player-level-data-container grid-top-row-left-column'>
        <div id='overlay'>
          <div id='level-current'>
            <span id='level-title'>LEVEL</span>
            <span id='level-value'></span>
          </div>
          <div id='level-record-container'>
            <div class='level-record'>
              <span class='icon'>
                <svg
                  xmlns='http://www.w3.org/2000/svg'
                  width='75%'
                  height='75%'
                  viewBox='0 0 24 24'
                  preserveAspectRatio='xMidYMid meet'
                  fill='currentcolor'
                >
                  <path
                    d='M12 6a7 7 0 1 0 0 14 7 7 0 0 0 0-14zm1 8h-2V8h2v6z'
                    opacity='.3'></path>
                  <path d='M9 1h6v2H9z'></path>
                  <path
                    d='m19 7 1-1-1-1-1 1a9 9 0 0 0-15 7 9 9 0 1 0 16-6zm-7 13a7 7 0 1 1 0-14 7 7 0 0 1 0 14z'
                  ></path>
                  <path d='M11 8h2v6h-2z'></path>
                </svg>
              </span>
              <span id='pb-value' class='level-record-value'></span>
            </div>
            <div class='level-record'>
              <span class='icon'>
                <svg
                  xmlns='http://www.w3.org/2000/svg'
                  width='75%'
                  height='75%'
                  viewBox='0 0 24 24'
                  preserveAspectRatio='xMidYMid meet'
                  fill='currentcolor'
                >
                  <path fill='none' d='M0 0h24v24H0z'></path>
                  <path d='M12 14c-2 0-3-1-3-3V5h6v6c0 2-1 3-3 3z' opacity='.3'
                  ></path>
                  <path
                    d='M19 5h-2V3H7v2H5L3 7v1c0 3 2 5 4 5 1 1 2 3 4 3v3H7v2h10v-2h-4v-3c2 0 3-2 4-3 2 0 4-2 4-5V7l-2-2zM5 8V7h2v4L5 8zm7 6c-2 0-3-1-3-3V5h6v6c0 2-1 3-3 3zm7-6-2 3V7h2v1z'
                  ></path>
                </svg>
              </span>
              <span id='daily-pb-value' class='level-record-value'></span>
            </div>
          </div>
        </div>
        <div>
          <span id='hidden-letter-label'>Hidden Letters: A B C D </span>
          <span id='hidden-letter'></span>
        </div>
        <div>
          <span id='fake-letter-label'>Fake Letters: A B C D </span>
          <span id='fake-letter'></span>
        </div>
        <div>
          <span id='letters-label'>Letters: A B C D A B C D A B C D </span>
          <span id='letters'></span>
        </div>
        <span class='made-by'>Made by: <Twitch /> clarkio</span>
      </div>
      <div
        class='player-iframe-container grid-top-row-right-column'
        id='wos-board'
      >
        <iframe id='wos-board-iframe' src=''></iframe>
      </div>
      <div
        class='grid-bottom-row-fill-horizontal'
        id='correct-words-log-container'
      >
        <span>Correct Words: (* potential words missed)</span>
        <div id='correct-words-log' class='logs'></div>
      </div>
    </div>
    <details id='wos-helper-logs'>
      <summary>Show/Hide Logs</summary>
      <div class='log-container'>
        <div>
          <h3>WOS Event Log:</h3>
          <div id='wos-game-log' class='logs'></div>
        </div>
        <div>
          <h3>Twitch Chat Log:</h3>
          <div id='twitch-chat-log' class='logs'></div>
        </div>
      </div>
    </details>
  </div>
</WosBaseLayout>

<script>
  import { GameSpectator } from '../scripts/wos-helper';
  import { removeUnnecessaryElements } from '../scripts/wos-widget';

  const twitchConnectBtn = document.getElementById(
    'twitch-connect-btn'
  ) as HTMLButtonElement;
  twitchConnectBtn.addEventListener('click', () => {
    const channel = (
      document.getElementById('twitchChannel') as HTMLInputElement
    ).value;
    spectator.connectToTwitch(channel);
  });
  const twitchDisconnectBtn = document.getElementById(
    'twitch-disconnect-btn'
  ) as HTMLButtonElement;
  twitchDisconnectBtn.addEventListener('click', () => {
    spectator.disconnectTwitch();
  });

  const wosConnectBtn = document.getElementById(
    'wos-connect-btn'
  ) as HTMLButtonElement;
  wosConnectBtn.addEventListener('click', () => {
    const mirrorUrl = (document.getElementById('mirrorUrl') as HTMLInputElement)
      .value;
    spectator.connectToWosGame(mirrorUrl);
  });
  const wosDisconnectBtn = document.getElementById(
    'wos-discconnect-btn'
  ) as HTMLButtonElement;
  wosDisconnectBtn.addEventListener('click', () => {
    spectator.disconnect();
  });

  const spectator = new GameSpectator();

  document.addEventListener('DOMContentLoaded', () => {
    // check for query parameters in the url
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('mirrorUrl')) {
      const url = urlParams.get('mirrorUrl') || '';
      const mirrorUrlInput = document.getElementById(
        'mirrorUrl'
      ) as HTMLInputElement;
      mirrorUrlInput.value = url;
      const iframe = document.getElementById(
        'wos-board-iframe'
      ) as HTMLIFrameElement;
      iframe.src = url;
      console.log(url);
    }

    const twitchChatWidget = document.getElementById(
      'twitch-chat-widget'
    ) as HTMLIFrameElement;
    const grid = document.querySelector('.wos-main-grid') as HTMLElement;
    if (urlParams.has('chat')) {
      const isChatEnabled = urlParams.get('chat')?.toLowerCase() === 'true';
      if (isChatEnabled) {
        twitchChatWidget.style.display = '';
        grid.classList.remove('chat-hidden');
      } else {
        twitchChatWidget.style.display = 'none';
        grid.classList.add('chat-hidden');
      }
    } else {
      twitchChatWidget.style.display = '';
      grid.classList.remove('chat-hidden');
    }

    if (urlParams.has('twitchChannel')) {
      const twitchChannel = urlParams.get('twitchChannel') || 'clarkio';
      const twitchChannelInput = document.getElementById(
        'twitchChannel'
      ) as HTMLInputElement;
      twitchChannelInput.value = twitchChannel;

      const twitchChatWidget = document.getElementById(
        'twitch-chat-widget'
      ) as HTMLIFrameElement;
      twitchChatWidget.src = `https://www.twitch.tv/embed/${twitchChannel}/chat?darkpopout&parent=${location.hostname}`;
    }
    const mirrorUrl = (document.getElementById('mirrorUrl') as HTMLInputElement)
      .value;
    spectator.connectToWosGame(mirrorUrl);
    const channel = (
      document.getElementById('twitchChannel') as HTMLInputElement
    ).value;
    spectator.connectToTwitch(channel);

    if (urlParams.has('widget')) {
      const isWidget = urlParams.get('widget')?.toLowerCase() === 'true';
      const grid = document.querySelector('.wos-main-grid') as HTMLElement;
      if (isWidget) {
        document.body.classList.add('widget-mode');
        removeUnnecessaryElements();
        grid.classList.add('widget-mode');
      } else {
        document.body.classList.remove('widget-mode');
        grid.classList.remove('widget-mode');
      }
    }

    if (urlParams.has('board')) {
      const isBoardVisible = urlParams.get('board')?.toLowerCase() === 'true';
      if (isBoardVisible) {
        document.getElementById('wos-board')!.style.display = '';
      } else {
        document.getElementById('wos-board')!.style.display = 'none';
      }
    } else {
      document.getElementById('wos-board')!.style.display = '';
    }
  });
</script>

<style>
  /* Override wrapper max-width when in widget mode */
  :global(.widget-mode .wrapper) {
    max-width: 100% !important;
    padding: 0 !important;
  }
</style>
